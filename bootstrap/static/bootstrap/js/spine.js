// Generated by CoffeeScript 1.3.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  if (window.Bootstrap == null) {
    window.Bootstrap = {};
  }

  Bootstrap.Modal = (function(_super) {

    __extends(Modal, _super);

    Modal.name = 'Modal';

    Modal.prototype.events = {
      'click .ok': 'on_ok',
      'click [data-dismiss="modal"]': 'on_dismiss'
    };

    function Modal() {
      this.clear = __bind(this.clear, this);

      this.show = __bind(this.show, this);

      this.hide = __bind(this.hide, this);

      this.on_ok = __bind(this.on_ok, this);

      this.on_dismiss = __bind(this.on_dismiss, this);

      this.on_shown = __bind(this.on_shown, this);

      this.on_keypress = __bind(this.on_keypress, this);
      Modal.__super__.constructor.apply(this, arguments);
      this.inputs = $('input', this.el);
      this.dismiss_buttons = $('[data-dismiss="modal"]', this.el);
      this.el.bind({
        'keypress': this.on_keypress
      });
      this.el.bind('shown', this.on_shown);
      this.el.bind('hidden', this.on_hidden);
    }

    Modal.prototype.on_keypress = function(event) {
      if ((event.keyCode || event.which) === 13) {
        return this.on_ok();
      }
    };

    Modal.prototype.on_shown = function() {
      var _ref;
      return (_ref = this.inputs.first()) != null ? _ref.focus() : void 0;
    };

    Modal.prototype.on_dismiss = function() {
      return this.clear();
    };

    Modal.prototype.on_ok = function() {
      return null;
    };

    Modal.prototype.set_options = function(options) {
      return this.el.modal(options);
    };

    Modal.prototype.hide = function() {
      return this.el.modal('hide');
    };

    Modal.prototype.show = function() {
      return this.el.modal('show');
    };

    Modal.prototype.clear = function() {
      return this.inputs.val('');
    };

    return Modal;

  })(Spine.Controller);

  Bootstrap.ModalMessage = (function(_super) {

    __extends(ModalMessage, _super);

    ModalMessage.name = 'ModalMessage';

    function ModalMessage() {
      this.on_hidden = __bind(this.on_hidden, this);

      this.on_show = __bind(this.on_show, this);
      ModalMessage.__super__.constructor.apply(this, arguments);
      this.el.bind('show', this.on_show);
    }

    ModalMessage.prototype.on_show = function() {
      var _ref;
      if (typeof this.on_show_call === "function") {
        this.on_show_call();
      }
      return (_ref = this.parent) != null ? _ref.hide() : void 0;
    };

    ModalMessage.prototype.on_hidden = function() {
      var _ref;
      if (typeof this.on_hidden_call === "function") {
        this.on_hidden_call();
      }
      return (_ref = this.parent) != null ? _ref.show() : void 0;
    };

    return ModalMessage;

  })(Bootstrap.Modal);

  $.fn.showFormErrors = function(errors) {
    var $field, element, field_errors, field_name, _i, _len, _ref, _results;
    _ref = $('[name]');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      $(element).tooltip('hide').data('tooltip', null).data('tooltip');
      $(element).parents('.control-group').removeClass('error');
    }
    _results = [];
    for (field_name in errors) {
      field_errors = errors[field_name];
      field_errors = field_errors.join('\n');
      $field = $("[name='" + field_name + "']", this);
      $field.tooltip({
        title: field_errors
      }).tooltip('show');
      $field.parents('.control-group').addClass('error');
      _results.push($field.parents('.modal').bind('hide', function() {
        return $field.tooltip('hide');
      }));
    }
    return _results;
  };

}).call(this);
